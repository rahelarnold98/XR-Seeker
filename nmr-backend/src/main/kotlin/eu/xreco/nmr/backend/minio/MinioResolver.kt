package eu.xreco.nmr.backend.minio

import eu.xreco.nmr.backend.config.MinioClientSingleton
import eu.xreco.nmr.backend.config.MinioConfig
import io.minio.GetObjectArgs
import io.minio.MinioClient
import io.minio.PutObjectArgs
import io.minio.StatObjectArgs
import io.minio.errors.MinioException
import org.vitrivr.engine.core.model.metamodel.Schema
import org.vitrivr.engine.core.model.retrievable.RetrievableId
import org.vitrivr.engine.core.resolver.Resolvable
import org.vitrivr.engine.core.resolver.Resolver
import org.vitrivr.engine.core.resolver.ResolverFactory
import org.vitrivr.engine.core.source.file.MimeType
import java.io.IOException
import java.io.InputStream
import java.io.OutputStream
import java.nio.file.Files

/**
 * A [Resolver] resolves a physical file from Minio.
 *
 * @author Rahel Arnold
 * @version 1.0.0
 */
class MinioResolver : ResolverFactory {
    /**
     * Generates a new [MinioResolver] instance using the provided [parameters].
     *
     * @param parameters The parameters used to configure [Resolver]
     * @return [MinioResolver]
     */
    override fun newResolver(schema: Schema, parameters: Map<String, String>): Resolver {
        val mimeType = MimeType.valueOf(parameters["mimeType"] ?: "JPG")

        return Instance(MinioClientSingleton.minioClient, MinioConfig.PREVIEW_BUCKET, mimeType)
    }

    /**
     * The [Resolver] generated by this [MinioResolver].
     */
    private class Instance(
        private val minioClient: MinioClient, private val bucketName: String, private val mimeType: MimeType
    ) : Resolver {
        /**
         * Resolves the provided [RetrievableId] to a [Resolvable] using this [Resolver].
         *
         * @param id The [RetrievableId] to resolve.
         * @return [Resolvable] or null, if [RetrievableId] could not be resolved.
         */
        override fun resolve(id: RetrievableId): Resolvable = MinioResolvable(id)

        /**
         * A [Resolvable] generated by this [MinioResolver].
         */
        inner class MinioResolvable(override val retrievableId: RetrievableId) : Resolvable {
            override val mimeType: MimeType
                get() = this@Instance.mimeType

            override fun exists(): Boolean {
                return try {
                    minioClient.statObject(
                        StatObjectArgs.builder().bucket(bucketName).`object`(retrievableId.toString()).build()
                    )
                    true
                } catch (e: MinioException) {
                    false
                }
            }

            override fun openInputStream(): InputStream {
                return minioClient.getObject(
                    GetObjectArgs.builder().bucket(bucketName).`object`(retrievableId.toString()).build()
                )
            }

            override fun openOutputStream(): OutputStream {
                val tempFile = Files.createTempFile("upload-", null)
                val outputStream = Files.newOutputStream(tempFile)

                return object : OutputStream() {
                    private var closed = false

                    override fun write(b: Int) {
                        if (closed) {
                            throw IOException("Stream closed")
                        }
                        outputStream.write(b)
                    }

                    override fun write(b: ByteArray, off: Int, len: Int) {
                        if (closed) {
                            throw IOException("Stream closed")
                        }
                        outputStream.write(b, off, len)
                    }

                    override fun flush() {
                        if (closed) {
                            throw IOException("Stream closed")
                        }
                        outputStream.flush()
                    }

                    override fun close() {
                        if (!closed) {
                            closed = true
                            outputStream.close()

                            // Upload temporary file to Minio
                            val inputStream = Files.newInputStream(tempFile)
                            try {
                                minioClient.putObject(
                                    PutObjectArgs.builder().bucket(bucketName).`object`(retrievableId.toString())
                                        .stream(inputStream, Files.size(tempFile), -1).build()
                                )
                            } finally {
                                inputStream.close()
                                // Delete the temporary file after upload
                                Files.delete(tempFile)
                            }
                        }
                    }
                }
            }
        }
    }
}
